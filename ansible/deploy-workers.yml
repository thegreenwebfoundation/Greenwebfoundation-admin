---
- name: Deploy updates for the worker nodes
  hosts:
    # - app1.thegreenwebfoundation.org
    - app2.thegreenwebfoundation.org
  remote_user: "deploy"
  become: false

  vars:
    project_git_repo: "git@github.com:thegreenwebfoundation/admin-portal.git"
    project_deploy_strategy: git
    project_version: "master"
    project_local_path: "../"
    project_unwanted_items:
      - .git
    project_finalize: true
    # if an app servers are behind nginx working as reverse proxy, it is not necessary to
    # run nginx on the machine
    use_nginx: false
    # setting this to true will fetch the latest version of nodejs
    install_node: false
    # set this to true will fetch the system requirements like python, mariadb, redis,
    # and so on
    install_system_reqs: false
    # run an update of our front dependencies as part of the deploy. This is better
    # handled in source control, but if the front end will not build in deployment, this
    # is a workaround
    update_front_end_deps: true
    # For triggering restarts with supervisor
    supervisor_restart: false
    supervisor_user: "deploy"
    supervisor_gunicorn_app: "admin_web"
    supervisor_worker_job: "admin_worker"
    dramatiq_threads: 3
    dramatiq_processes: 2


  roles:
    - f500.project_deploy

  tasks:
    - name: Set up most recent timestamps directories
      ansible.builtin.include_tasks: "_set_up_directories.yml"

    - name: Install dependencies for python and js
      ansible.builtin.include_tasks: "_install_deploy_dependencies.yml"

    - name: Assemble assets and related files
      ansible.builtin.include_tasks: "_assemble_deploy_assets.yml"

    - name: Set up script for running workers, via supervisor
      ansible.builtin.template:
        src: "run_worker.sh.j2"
        dest: "{{ project_root }}/current/run_worker.sh"
        owner: deploy
        group: deploy
        mode: "0755"
      become: true

    - name: Set up supervisor entry for workers
      ansible.builtin.template:
        src: "supervisor.worker.conf.j2"
        dest: "/etc/supervisor/conf.d/{{ tgwf_domain_name }}_worker.conf"
        owner: deploy
        group: deploy
        mode: "0755"
      become: true

    - name: Trigger restart for worker with supervisor
      ansible.builtin.supervisorctl:
        name: "{{ supervisor_worker_job }}:"
        state: restarted
      become: true
      when: supervisor_restart is true

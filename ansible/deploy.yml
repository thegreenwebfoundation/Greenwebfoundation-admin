---
- name: Deploy the TGWF django admin
  hosts:
    - all
  remote_user: "deploy"
  become: no

  vars:
    project_git_repo: "git@github.com:thegreenwebfoundation/admin-portal.git"
    project_deploy_strategy: git
    project_version: "master"
    project_local_path: "../"
    restart_supervisor: false
    supervisor_user: "deploy"
    gunicorn_app: "admin_web"
    project_unwanted_items:
      - .git
    project_finalize: true
    # if an app servers are behind nginx working as reverse proxy, it is not necessary to
    # run nginx on the machine
    use_nginx: false
    # setting this to true will fetch the latest version of nodejs
    install_node: true
    # set this to true will fetch the system requirements like python, mariadb, redis,
    # and so on
    install_system_reqs: true
    # run an update of our front dependencies as part of the deploy. This is better
    # handled in source control, but if the front end will not build in deployment, this
    # is a workaround
    update_front_end_deps: true

  roles:
    - f500.project_deploy

  tasks:
    - name: set up directory for deploying django app
      file:
        path: "/var/www/{{ tgwf_domain_name }}.thegreenwebfoundation.org"
        state: directory
        mode: "0755"
        owner: deploy
        group: deploy
      become: yes

    - name: set up media directory
      file:
        path: "/var/www/{{ tgwf_domain_name }}.thegreenwebfoundation.org/shared/media/"
        state: directory
        mode: "0755"
        owner: deploy
        group: deploy
      become: yes

    - name: set up data directory
      file:
        path: "/var/www/{{ tgwf_domain_name }}.thegreenwebfoundation.org/shared/data/"
        state: directory
        mode: "0755"
        owner: deploy
        group: deploy
      become: yes

    - name: move .env file to shared directory
      template:
        src: "templates/dotenv.j2"
        dest: "{{ project_root }}/shared/.env"
      become: yes

    - name: Link .env to shared directory
      file:
        src: "{{ project_root }}/shared/.env"
        dest: "{{ project_root }}/current/.env"
        state: link

    - name: Link ./media to shared ./media directory
      file:
        src: "{{ project_root }}/shared/media"
        dest: "{{ project_root }}/current/media"
        state: link

    - name: Link ./data to shared ./data directory
      file:
        src: "{{ project_root }}/shared/data"
        dest: "{{ project_root }}/current/data"
        state: link

    - name: install mariadb libraries for python
      apt:
        pkg:
          - build-essential
          - libmariadb-dev
          - libmariadbclient-dev
          - libmariadb3
          - mariadb-client-10.3
          - mariadb-client-core-10.3
          - mariadb-common
          - mariadb-server-10.3
          - mariadb-server-core-10.3
          # - redis-server
          # - redis-tools
        state: present
        update_cache: true
      become: yes
      when: install_system_reqs == true

    - name: install nginx for reverse proxying and serving static files
      apt:
        pkg:
          - build-essential
          - nginx
        state: present
        update_cache: true
      become: yes
      when: use_nginx == true

    - name: Download node source script
      ansible.builtin.get_url:
        url: https://deb.nodesource.com/setup_18.x
        dest: /tmp/setup_18.x.sh
        mode: "0755"
      when: install_node == true

    - name: Run node installer as root
      ansible.builtin.command: "bash /tmp/setup_18.x.sh"
      when: install_node == true
      become: true

    - name: install node and npm
      apt:
        pkg:
          - nodejs
        state: present
        update_cache: true
      become: yes
      when: install_node == true

    - name: install python libraries
      apt:
        pkg:
          - python3-venv
          - python3-dev
          - python3-pip
          - python-is-python3
          - supervisor
        state: present
        update_cache: true
      become: yes
      when: install_system_reqs == true

    - name: set up venv for pipenv to use. this is needed for the step below to work
      # without creating the venv in .env, pipenv can't find the version
      # of python or pip to use, and errors out
      shell: "python -m venv .venv"
      args:
        chdir: "{{ project_root }}/current"

    - name: install latest version of pipenv
      ansible.builtin.pip:
        name: pipenv
        virtualenv: "{{ project_root }}/current/.venv"

    - name: install python dependencies with pipenv
      shell: "python -m pipenv sync"
      args:
        chdir: "{{ project_root }}/current"
      environment:
        # make sure we install in the project root.
        # this way when we clear up old releases we also
        # remove the deps
        PIPENV_VENV_IN_PROJECT: 1
      tags: [wip]

    - name: update node deps for building tailwind
      shell: "python -m pipenv run ./manage.py tailwind update"
      args:
        chdir: "{{ project_root }}/current"
      when: update_front_end_deps == true

    - name: install node deps for building tailwind
      shell: "python -m pipenv run ./manage.py tailwind install"
      args:
        chdir: "{{ project_root }}/current"

    - name: build minified tailwind css file
      shell: "python -m pipenv run ./manage.py tailwind build"
      args:
        chdir: "{{ project_root }}/current"

    - name: build javascript bundle with rollup, using the local config file
      shell: "npx rollup --config"
      args:
        chdir: "{{ project_root }}/current/apps/theme/static_src"
      tags: [wip]

    - name: collect static files for django
      shell: "python -m pipenv run ./manage.py collectstatic --no-input"
      args:
        chdir: "{{ project_root }}/current"
      tags: [wip]

    - name: set up nginx server entry
      template:
        src: "nginx.conf.j2"
        dest: "/etc/nginx/sites-available/{{ tgwf_domain_name }}.thegreenwebfoundation.org"
      become: yes
      when: use_nginx == true

    - name: Create a symbolic to make nginx file appear in sites-enabled
      file:
        src: "/etc/nginx/sites-available/{{ tgwf_domain_name }}.thegreenwebfoundation.org"
        dest: "/etc/nginx/sites-enabled/{{ tgwf_domain_name }}.thegreenwebfoundation.org"
        state: link
      become: yes
      when: use_nginx == true

    - name: set up script for running gunicorn, via supervisor
      template:
        src: "run_gunicorn.sh.j2"
        dest: "{{ project_root }}/current/run_gunicorn.sh"
      become: yes

    - name: set up script for running workers, via supervisor
      template:
        src: "run_worker.sh.j2"
        dest: "{{ project_root }}/current/run_worker.sh"
      become: yes

    - name: set up supervisor entry for web
      template:
        src: "supervisor.gunicorn.conf.j2"
        dest: "/etc/supervisor/conf.d/{{ tgwf_domain_name }}_web.conf"
      become: yes

    - name: set up supervisor entry for worker
      template:
        src: "supervisor.worker.conf.j2"
        dest: "/etc/supervisor/conf.d/{{ tgwf_domain_name }}_worker.conf"
      become: yes

    - name: trigger restart for app with supervisor
      supervisorctl:
        name: "{{ gunicorn_app }}:"
        state: restarted
      become: yes

    - name: Reload nginx
      service:
        name: nginx
        state: reloaded
      become: yes
      when: use_nginx == true
